<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>OperationalError
          at /views/sessions_yaml/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background-color:#fff; color:#000; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#4f4f4f; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#464646; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em; font-weight:normal; }
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #575757; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
    .fname { user-select: all; }
  </style>
  
  <script>
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(document.querySelectorAll('table.vars'));
      hideAll(document.querySelectorAll('ol.pre-context'));
      hideAll(document.querySelectorAll('ol.post-context'));
      hideAll(document.querySelectorAll('div.pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
  </script>
  
</head>
<body>
<div id="summary">
  <h1>OperationalError
       at /views/sessions_yaml/</h1>
  <pre class="exception_value">connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>GET</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://trainingcrm.sika.io/views/sessions_yaml/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>3.2.11</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>OperationalError</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td><span class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/psycopg2/__init__.py</span>, line 122, in connect</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/root/.local/share/virtualenvs/app-4PlAip0Q/bin/uwsgi</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>3.10.10</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#x27;.&#x27;,
 &#x27;&#x27;,
 &#x27;/usr/local/lib/python310.zip&#x27;,
 &#x27;/usr/local/lib/python3.10&#x27;,
 &#x27;/usr/local/lib/python3.10/lib-dynload&#x27;,
 &#x27;/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages&#x27;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Wed, 10 May 2023 02:04:50 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 219, in ensure_connection
          

          
            <div class="context" id="c140263482069760">
              
                <ol start="212" class="pre-context" id="pre140263482069760">
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    def ensure_connection(self):</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        &quot;&quot;&quot;Guarantee that a connection to the database is established.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        if self.connection is None:</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>            with self.wrap_database_errors:</pre></li>
                
                </ol>
              
              <ol start="219" class="context-line">
                <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>                self.connect()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='220' class="post-context" id="post140263482069760">
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    # ##### Backend-specific wrappers for PEP-249 connection methods #####</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    def _prepare_cursor(self, cursor):</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        Validate the connection is usable and perform database cursor wrapping.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482069760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482069760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482076544">
              
                <ol start="26" class="pre-context" id="pre140263482076544">
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482076544">
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482076544')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482076544">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function BaseDatabaseWrapper.connect at 0x7f91aa4720e0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 200, in connect
          

          
            <div class="context" id="c140263482080128">
              
                <ol start="193" class="pre-context" id="pre140263482080128">
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        # Reset parameters defining when to close the connection</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        max_age = self.settings_dict[&#x27;CONN_MAX_AGE&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.close_at = None if max_age is None else time.monotonic() + max_age</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.closed_in_transaction = False</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.errors_occurred = False</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        # Establish the connection</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        conn_params = self.get_connection_params()</pre></li>
                
                </ol>
              
              <ol start="200" class="context-line">
                <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.connection = self.get_new_connection(conn_params)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='201' class="post-context" id="post140263482080128">
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.set_autocommit(self.settings_dict[&#x27;AUTOCOMMIT&#x27;])</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.init_connection_state()</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        connection_created.send(sender=self.__class__, connection=self)</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.run_on_commit = []</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482080128')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482080128">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>conn_params</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>max_age</td>
                    <td class="code"><pre>0</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482066368">
              
                <ol start="26" class="pre-context" id="pre140263482066368">
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482066368">
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482066368')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482066368">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,
 {&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
  &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
  &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
  &#x27;port&#x27;: 5432,
  &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;})</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function DatabaseWrapper.get_new_connection at 0x7f91aa30d6c0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/postgresql/base.py</code>, line 187, in get_new_connection
          

          
            <div class="context" id="c140263482077184">
              
                <ol start="180" class="pre-context" id="pre140263482077184">
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>            conn_params[&#x27;host&#x27;] = settings_dict[&#x27;HOST&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        if settings_dict[&#x27;PORT&#x27;]:</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>            conn_params[&#x27;port&#x27;] = settings_dict[&#x27;PORT&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        return conn_params</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>    def get_new_connection(self, conn_params):</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        connection = Database.connect(**conn_params)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='188' class="post-context" id="post140263482077184">
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # self.isolation_level must be set:</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # - after connecting to the database in order to obtain the database&#x27;s</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        #   default when no value is explicitly specified in options.</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # - before calling _set_autocommit() because if autocommit is on, that</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482077184')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482077184">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>conn_params</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/psycopg2/__init__.py</code>, line 122, in connect
          

          
            <div class="context" id="c140263493468992">
              
                <ol start="115" class="pre-context" id="pre140263493468992">
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    kwasync = {}</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if &#x27;async&#x27; in kwargs:</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        kwasync[&#x27;async&#x27;] = kwargs.pop(&#x27;async&#x27;)</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if &#x27;async_&#x27; in kwargs:</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        kwasync[&#x27;async_&#x27;] = kwargs.pop(&#x27;async_&#x27;)</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    dsn = _ext.make_dsn(dsn, **kwargs)</pre></li>
                
                </ol>
              
              <ol start="122" class="context-line">
                <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='123' class="post-context" id="post140263493468992">
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if cursor_factory is not None:</pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        conn.cursor_factory = cursor_factory</pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    return conn</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263493468992')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263493468992">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>connection_factory</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>cursor_factory</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>dsn</td>
                    <td class="code"><pre>(&#x27;user=trainingcrm_sika_io password=pisusisvojecrmvole host=db0.oxs.cz &#x27;
 &#x27;port=5432 dbname=trainingcrm_sika_io&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwasync</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
          <li><h3>
          
            The above exception (connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
) was the direct cause of the following exception:
          
        </h3></li>
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/core/handlers/exception.py</code>, line 47, in inner
          

          
            <div class="context" id="c140263482075328">
              
                <ol start="40" class="pre-context" id="pre140263482075328">
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>                response = await sync_to_async(response_for_exception, thread_sensitive=False)(request, exc)</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>            return response</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>        return inner</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>    else:</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>        @wraps(get_response)</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>        def inner(request):</pre></li>
                
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="47" class="context-line">
                <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>                response = get_response(request)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='48' class="post-context" id="post140263482075328">
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>            except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>                response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>            return response</pre></li>
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482075328', 'post140263482075328')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482075328')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482075328">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>OperationalError(&#x27;connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host\n\tIs the server running on that host and accepting TCP/IP connections?\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method BaseHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f91aa7e80a0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: GET &#x27;/views/sessions_yaml/&#x27;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/core/handlers/base.py</code>, line 181, in _get_response
          

          
            <div class="context" id="c140263482066944">
              
                <ol start="174" class="pre-context" id="pre140263482066944">
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>            # If it is an asynchronous view, run it in a subthread.</pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>            if asyncio.iscoroutinefunction(wrapped_callback):</pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>                wrapped_callback = async_to_sync(wrapped_callback)</pre></li>
                
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="181" class="context-line">
                <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='182' class="post-context" id="post140263482066944">
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>                if response is None:</pre></li>
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>                    raise</pre></li>
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482066944', 'post140263482066944')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482066944')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482066944">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function sessions_yaml_view at 0x7f91a3fad360&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;function CsrfViewMiddleware.process_view at 0x7f91a8a49900&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: GET &#x27;/views/sessions_yaml/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f91aa7e80a0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function sessions_yaml_view at 0x7f91a3fad360&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/views/decorators/csrf.py</code>, line 54, in wrapped_view
          

          
            <div class="context" id="c140263482075648">
              
                <ol start="47" class="pre-context" id="pre140263482075648">
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>def csrf_exempt(view_func):</pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    &quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    # view_func.csrf_exempt = True would also work, but decorators are nicer</pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    # if they don&#x27;t have side effects, so return a new function.</pre></li>
                
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="54" class="context-line">
                <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>        return view_func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='55' class="post-context" id="post140263482075648">
                  
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre140263482075648', 'post140263482075648')"><pre>    return wraps(view_func)(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482075648')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482075648">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: GET &#x27;/views/sessions_yaml/&#x27;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function sessions_yaml_view at 0x7f91a3fad2d0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/app/./trainingcrm/views.py</code>, line 170, in sessions_yaml_view
          

          
            <div class="context" id="c140263482079232">
              
                <ol start="163" class="pre-context" id="pre140263482079232">
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>def healthz(request):</pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>    return HttpResponse(&quot;OK&quot;)</pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>@csrf_exempt</pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>def sessions_yaml_view(request):</pre></li>
                
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>    sessions = []</pre></li>
                
                </ol>
              
              <ol start="170" class="context-line">
                <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>    for session in Session.objects.all().order_by(&quot;date_begin&quot;):</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='171' class="post-context" id="post140263482079232">
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>        if session.slug is None:</pre></li>
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>            continue</pre></li>
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>        length = (session.date_end - session.date_begin).days + 1</pre></li>
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>        sessions.append(</pre></li>
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>            {</pre></li>
                  
                  <li onclick="toggle('pre140263482079232', 'post140263482079232')"><pre>                &quot;id&quot;: session.slug,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482079232')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482079232">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: GET &#x27;/views/sessions_yaml/&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sessions</td>
                    <td class="code"><pre>[]</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py</code>, line 280, in __iter__
          

          
            <div class="context" id="c140263482071296">
              
                <ol start="273" class="pre-context" id="pre140263482071296">
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>            2. sql.compiler.results_iter()</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>               - Returns one row at time. At this point the rows are still just</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>                 tuples. In some cases the return values are converted to</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>                 Python values at this location.</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>            3. self.iterator()</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>               - Responsible for turning the rows into model objects.</pre></li>
                
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>        &quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="280" class="context-line">
                <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>        self._fetch_all()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='281' class="post-context" id="post140263482071296">
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>        return iter(self._result_cache)</pre></li>
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>    def __bool__(self):</pre></li>
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>        self._fetch_all()</pre></li>
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre>        return bool(self._result_cache)</pre></li>
                  
                  <li onclick="toggle('pre140263482071296', 'post140263482071296')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482071296')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482071296">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>Error in formatting: OperationalError: connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py</code>, line 1324, in _fetch_all
          

          
            <div class="context" id="c140263482072064">
              
                <ol start="1317" class="pre-context" id="pre140263482072064">
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        c._known_related_objects = self._known_related_objects</pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        c._iterable_class = self._iterable_class</pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        c._fields = self._fields</pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        return c</pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>    def _fetch_all(self):</pre></li>
                
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        if self._result_cache is None:</pre></li>
                
                </ol>
              
              <ol start="1324" class="context-line">
                <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>            self._result_cache = list(self._iterable_class(self))</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1325' class="post-context" id="post140263482072064">
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        if self._prefetch_related_lookups and not self._prefetch_done:</pre></li>
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>            self._prefetch_related_objects()</pre></li>
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>    def _next_is_sticky(self):</pre></li>
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140263482072064', 'post140263482072064')"><pre>        Indicate that the next filter call and the one following that should</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482072064')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482072064">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>Error in formatting: OperationalError: connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py</code>, line 51, in __iter__
          

          
            <div class="context" id="c140263482080192">
              
                <ol start="44" class="pre-context" id="pre140263482080192">
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>    def __iter__(self):</pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        queryset = self.queryset</pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        db = queryset.db</pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        compiler = queryset.query.get_compiler(using=db)</pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        # Execute the query. This will also fill compiler.select, klass_info,</pre></li>
                
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        # and annotations.</pre></li>
                
                </ol>
              
              <ol start="51" class="context-line">
                <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='52' class="post-context" id="post140263482080192">
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        select, klass_info, annotation_col_map = (compiler.select, compiler.klass_info,</pre></li>
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>                                                  compiler.annotation_col_map)</pre></li>
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        model_cls = klass_info[&#x27;model&#x27;]</pre></li>
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        select_fields = klass_info[&#x27;select_fields&#x27;]</pre></li>
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        model_fields_start, model_fields_end = select_fields[0], select_fields[-1] + 1</pre></li>
                  
                  <li onclick="toggle('pre140263482080192', 'post140263482080192')"><pre>        init_list = [f[0].target.attname</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482080192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482080192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>compiler</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLCompiler object at 0x7f91a39bc130&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>db</td>
                    <td class="code"><pre>&#x27;default&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>queryset</td>
                    <td class="code"><pre>Error in formatting: OperationalError: connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.query.ModelIterable object at 0x7f91a39bc940&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/sql/compiler.py</code>, line 1173, in execute_sql
          

          
            <div class="context" id="c140263482075584">
              
                <ol start="1166" class="pre-context" id="pre140263482075584">
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            if result_type == MULTI:</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>                return iter([])</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>                return</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>        if chunked_fetch:</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            cursor = self.connection.chunked_cursor()</pre></li>
                
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="1173" class="context-line">
                <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            cursor = self.connection.cursor()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='1174' class="post-context" id="post140263482075584">
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            cursor.execute(sql, params)</pre></li>
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>        except Exception:</pre></li>
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            # Might fail for server-side cursors (e.g. connection closed)</pre></li>
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            cursor.close()</pre></li>
                  
                  <li onclick="toggle('pre140263482075584', 'post140263482075584')"><pre>            raise</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482075584')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482075584">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>chunk_size</td>
                    <td class="code"><pre>100</pre></td>
                  </tr>
                
                  <tr>
                    <td>chunked_fetch</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>params</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>result_type</td>
                    <td class="code"><pre>&#x27;multi&#x27;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLCompiler object at 0x7f91a39bc130&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>sql</td>
                    <td class="code"><pre>(&#x27;SELECT &quot;trainingcrm_session&quot;.&quot;id&quot;, &quot;trainingcrm_session&quot;.&quot;slug&quot;, &#x27;
 &#x27;&quot;trainingcrm_session&quot;.&quot;course_id&quot;, &quot;trainingcrm_session&quot;.&quot;venue_id&quot;, &#x27;
 &#x27;&quot;trainingcrm_session&quot;.&quot;date_begin&quot;, &quot;trainingcrm_session&quot;.&quot;date_end&quot;, &#x27;
 &#x27;&quot;trainingcrm_session&quot;.&quot;confirmed&quot;, &#x27;
 &#x27;&quot;trainingcrm_session&quot;.&quot;ondrejsika_linkedin_event&quot;, &#x27;
 &#x27;&quot;trainingcrm_session&quot;.&quot;ondrejsika_facebook_event&quot; FROM &quot;trainingcrm_session&quot; &#x27;
 &#x27;ORDER BY &quot;trainingcrm_session&quot;.&quot;date_begin&quot; ASC&#x27;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482078336">
              
                <ol start="26" class="pre-context" id="pre140263482078336">
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482078336">
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482078336', 'post140263482078336')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482078336')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482078336">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function BaseDatabaseWrapper.cursor at 0x7f91aa472680&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 259, in cursor
          

          
            <div class="context" id="c140263482072896">
              
                <ol start="252" class="pre-context" id="pre140263482072896">
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>                return self.connection.close()</pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>    # ##### Generic wrappers for PEP-249 connection methods #####</pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>    def cursor(self):</pre></li>
                
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>        &quot;&quot;&quot;Create a cursor, opening a connection if necessary.&quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="259" class="context-line">
                <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>        return self._cursor()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='260' class="post-context" id="post140263482072896">
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>    @async_unsafe</pre></li>
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>    def commit(self):</pre></li>
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>        &quot;&quot;&quot;Commit a transaction and reset the dirty flag.&quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>        self.validate_thread_sharing()</pre></li>
                  
                  <li onclick="toggle('pre140263482072896', 'post140263482072896')"><pre>        self.validate_no_atomic_block()</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482072896')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482072896">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 235, in _cursor
          

          
            <div class="context" id="c140263482065024">
              
                <ol start="228" class="pre-context" id="pre140263482065024">
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        if self.queries_logged:</pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>            wrapped_cursor = self.make_debug_cursor(cursor)</pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        else:</pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>            wrapped_cursor = self.make_cursor(cursor)</pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        return wrapped_cursor</pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>    def _cursor(self, name=None):</pre></li>
                
                </ol>
              
              <ol start="235" class="context-line">
                <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        self.ensure_connection()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='236' class="post-context" id="post140263482065024">
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        with self.wrap_database_errors:</pre></li>
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>            return self._prepare_cursor(self.create_cursor(name))</pre></li>
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>    def _commit(self):</pre></li>
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>        if self.connection is not None:</pre></li>
                  
                  <li onclick="toggle('pre140263482065024', 'post140263482065024')"><pre>            with self.wrap_database_errors:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482065024')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482065024">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482072384">
              
                <ol start="26" class="pre-context" id="pre140263482072384">
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482072384">
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482072384', 'post140263482072384')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482072384')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482072384">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function BaseDatabaseWrapper.ensure_connection at 0x7f91aa472290&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 218, in ensure_connection
          

          
            <div class="context" id="c140263482072192">
              
                <ol start="211" class="pre-context" id="pre140263482072192">
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>                % self.alias</pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>    def ensure_connection(self):</pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>        &quot;&quot;&quot;Guarantee that a connection to the database is established.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>        if self.connection is None:</pre></li>
                
                </ol>
              
              <ol start="218" class="context-line">
                <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>            with self.wrap_database_errors:</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='219' class="post-context" id="post140263482072192">
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>                self.connect()</pre></li>
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>    # ##### Backend-specific wrappers for PEP-249 connection methods #####</pre></li>
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>    def _prepare_cursor(self, cursor):</pre></li>
                  
                  <li onclick="toggle('pre140263482072192', 'post140263482072192')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482072192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482072192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/utils.py</code>, line 90, in __exit__
          

          
            <div class="context" id="c140263482077440">
              
                <ol start="83" class="pre-context" id="pre140263482077440">
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>            if issubclass(exc_type, db_exc_type):</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                dj_exc_value = dj_exc_type(*exc_value.args)</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                # Only set the &#x27;errors_occurred&#x27; flag for errors that may make</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                # the connection unusable.</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                if dj_exc_type not in (DataError, IntegrityError):</pre></li>
                
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                    self.wrapper.errors_occurred = True</pre></li>
                
                </ol>
              
              <ol start="90" class="context-line">
                <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>                raise dj_exc_value.with_traceback(traceback) from exc_value</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='91' class="post-context" id="post140263482077440">
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>    def __call__(self, func):</pre></li>
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>        # Note that we are intentionally not using @wraps here for performance</pre></li>
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>        # reasons. Refs #21109.</pre></li>
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>        def inner(*args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre140263482077440', 'post140263482077440')"><pre>            with self:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482077440')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482077440">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>db_exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;psycopg2.OperationalError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>dj_exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;django.db.utils.OperationalError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>dj_exc_value</td>
                    <td class="code"><pre>OperationalError(&#x27;connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host\n\tIs the server running on that host and accepting TCP/IP connections?\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc_type</td>
                    <td class="code"><pre>&lt;class &#x27;psycopg2.OperationalError&#x27;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc_value</td>
                    <td class="code"><pre>OperationalError(&#x27;connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host\n\tIs the server running on that host and accepting TCP/IP connections?\n&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.utils.DatabaseErrorWrapper object at 0x7f91a3c59510&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>traceback</td>
                    <td class="code"><pre>&lt;traceback object at 0x7f91a3061300&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 219, in ensure_connection
          

          
            <div class="context" id="c140263482069760">
              
                <ol start="212" class="pre-context" id="pre140263482069760">
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    def ensure_connection(self):</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        &quot;&quot;&quot;Guarantee that a connection to the database is established.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        if self.connection is None:</pre></li>
                
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>            with self.wrap_database_errors:</pre></li>
                
                </ol>
              
              <ol start="219" class="context-line">
                <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>                self.connect()</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='220' class="post-context" id="post140263482069760">
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    # ##### Backend-specific wrappers for PEP-249 connection methods #####</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>    def _prepare_cursor(self, cursor):</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre140263482069760', 'post140263482069760')"><pre>        Validate the connection is usable and perform database cursor wrapping.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482069760')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482069760">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482076544">
              
                <ol start="26" class="pre-context" id="pre140263482076544">
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482076544">
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482076544', 'post140263482076544')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482076544')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482076544">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function BaseDatabaseWrapper.connect at 0x7f91aa4720e0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py</code>, line 200, in connect
          

          
            <div class="context" id="c140263482080128">
              
                <ol start="193" class="pre-context" id="pre140263482080128">
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        # Reset parameters defining when to close the connection</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        max_age = self.settings_dict[&#x27;CONN_MAX_AGE&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.close_at = None if max_age is None else time.monotonic() + max_age</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.closed_in_transaction = False</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.errors_occurred = False</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        # Establish the connection</pre></li>
                
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        conn_params = self.get_connection_params()</pre></li>
                
                </ol>
              
              <ol start="200" class="context-line">
                <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.connection = self.get_new_connection(conn_params)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='201' class="post-context" id="post140263482080128">
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.set_autocommit(self.settings_dict[&#x27;AUTOCOMMIT&#x27;])</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.init_connection_state()</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        connection_created.send(sender=self.__class__, connection=self)</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre>        self.run_on_commit = []</pre></li>
                  
                  <li onclick="toggle('pre140263482080128', 'post140263482080128')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482080128')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482080128">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>conn_params</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>max_age</td>
                    <td class="code"><pre>0</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py</code>, line 33, in inner
          

          
            <div class="context" id="c140263482066368">
              
                <ol start="26" class="pre-context" id="pre140263482066368">
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    event_loop = get_running_loop()</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                except RuntimeError:</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    pass</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                else:</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                    if PY37 or event_loop.is_running():</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>                        raise SynchronousOnlyOperation(message)</pre></li>
                
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>            # Pass onwards.</pre></li>
                
                </ol>
              
              <ol start="33" class="context-line">
                <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>            return func(*args, **kwargs)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='34' class="post-context" id="post140263482066368">
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>    # If the message is actually a function, then be a no-arguments decorator.</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>    if callable(message):</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        func = message</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        message = &#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></li>
                  
                  <li onclick="toggle('pre140263482066368', 'post140263482066368')"><pre>        return decorator(func)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482066368')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482066368">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;,
 {&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
  &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
  &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
  &#x27;port&#x27;: 5432,
  &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;})</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function DatabaseWrapper.get_new_connection at 0x7f91aa30d6c0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>message</td>
                    <td class="code"><pre>&#x27;You cannot call this from an async context - use a thread or sync_to_async.&#x27;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/postgresql/base.py</code>, line 187, in get_new_connection
          

          
            <div class="context" id="c140263482077184">
              
                <ol start="180" class="pre-context" id="pre140263482077184">
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>            conn_params[&#x27;host&#x27;] = settings_dict[&#x27;HOST&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        if settings_dict[&#x27;PORT&#x27;]:</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>            conn_params[&#x27;port&#x27;] = settings_dict[&#x27;PORT&#x27;]</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        return conn_params</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>    @async_unsafe</pre></li>
                
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>    def get_new_connection(self, conn_params):</pre></li>
                
                </ol>
              
              <ol start="187" class="context-line">
                <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        connection = Database.connect(**conn_params)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='188' class="post-context" id="post140263482077184">
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # self.isolation_level must be set:</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # - after connecting to the database in order to obtain the database&#x27;s</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        #   default when no value is explicitly specified in options.</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        # - before calling _set_autocommit() because if autocommit is on, that</pre></li>
                  
                  <li onclick="toggle('pre140263482077184', 'post140263482077184')"><pre>        #   will set connection.isolation_level to ISOLATION_LEVEL_AUTOCOMMIT.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263482077184')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263482077184">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>conn_params</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.backends.postgresql.base.DatabaseWrapper object at 0x7f91a3ff7220&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          
            <code class="fname">/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/psycopg2/__init__.py</code>, line 122, in connect
          

          
            <div class="context" id="c140263493468992">
              
                <ol start="115" class="pre-context" id="pre140263493468992">
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    kwasync = {}</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if &#x27;async&#x27; in kwargs:</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        kwasync[&#x27;async&#x27;] = kwargs.pop(&#x27;async&#x27;)</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if &#x27;async_&#x27; in kwargs:</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        kwasync[&#x27;async_&#x27;] = kwargs.pop(&#x27;async_&#x27;)</pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre></pre></li>
                
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    dsn = _ext.make_dsn(dsn, **kwargs)</pre></li>
                
                </ol>
              
              <ol start="122" class="context-line">
                <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)</pre> <span>â€¦</span></li>
              </ol>
              
                <ol start='123' class="post-context" id="post140263493468992">
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    if cursor_factory is not None:</pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>        conn.cursor_factory = cursor_factory</pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre></pre></li>
                  
                  <li onclick="toggle('pre140263493468992', 'post140263493468992')"><pre>    return conn</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '140263493468992')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v140263493468992">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>connection_factory</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>cursor_factory</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>dsn</td>
                    <td class="code"><pre>(&#x27;user=trainingcrm_sika_io password=pisusisvojecrmvole host=db0.oxs.cz &#x27;
 &#x27;port=5432 dbname=trainingcrm_sika_io&#x27;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#x27;database&#x27;: &#x27;trainingcrm_sika_io&#x27;,
 &#x27;host&#x27;: &#x27;db0.oxs.cz&#x27;,
 &#x27;password&#x27;: &#x27;pisusisvojecrmvole&#x27;,
 &#x27;port&#x27;: 5432,
 &#x27;user&#x27;: &#x27;trainingcrm_sika_io&#x27;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwasync</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  <form action="https://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="OperationalError at /views/sessions_yaml/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: GET
Request URL: https://trainingcrm.sika.io/views/sessions_yaml/

Django Version: 3.2.11
Python Version: 3.10.10
Installed Applications:
[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;django_prometheus&#x27;,
 &#x27;debug_toolbar&#x27;,
 &#x27;email_queue&#x27;,
 &#x27;trainingcrm&#x27;,
 &#x27;trainingcrm2&#x27;,
 &#x27;subscribe&#x27;]
Installed Middleware:
[&#x27;corsheaders.middleware.CorsMiddleware&#x27;,
 &#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,
 &#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;]



Traceback (most recent call last):
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 219, in ensure_connection
    self.connect()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 200, in connect
    self.connection = self.get_new_connection(conn_params)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/postgresql/base.py", line 187, in get_new_connection
    connection = Database.connect(**conn_params)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)

The above exception (connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?
) was the direct cause of the following exception:
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/core/handlers/base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/app/./trainingcrm/views.py", line 170, in sessions_yaml_view
    for session in Session.objects.all().order_by(&quot;date_begin&quot;):
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py", line 280, in __iter__
    self._fetch_all()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py", line 1324, in _fetch_all
    self._result_cache = list(self._iterable_class(self))
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/query.py", line 51, in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/models/sql/compiler.py", line 1173, in execute_sql
    cursor = self.connection.cursor()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 259, in cursor
    return self._cursor()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 235, in _cursor
    self.ensure_connection()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 218, in ensure_connection
    with self.wrap_database_errors:
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 219, in ensure_connection
    self.connect()
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/base/base.py", line 200, in connect
    self.connection = self.get_new_connection(conn_params)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/utils/asyncio.py", line 33, in inner
    return func(*args, **kwargs)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/django/db/backends/postgresql/base.py", line 187, in get_new_connection
    connection = Database.connect(**conn_params)
  File "/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.10/site-packages/psycopg2/__init__.py", line 122, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)

Exception Type: OperationalError at /views/sessions_yaml/
Exception Value: connection to server at &quot;db0.oxs.cz&quot; (91.121.154.139), port 5432 failed: No route to host
	Is the server running on that host and accepting TCP/IP connections?

</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#x27;*/*&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT_ENCODING</td>
          <td class="code"><pre>&#x27;gzip&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CDN_LOOP</td>
          <td class="code"><pre>&#x27;cloudflare&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CF_CONNECTING_IP</td>
          <td class="code"><pre>&#x27;91.121.89.212&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CF_IPCOUNTRY</td>
          <td class="code"><pre>&#x27;FR&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CF_RAY</td>
          <td class="code"><pre>&#x27;7c4e9cd4fd8fd40c-FRA&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CF_VISITOR</td>
          <td class="code"><pre>&#x27;{&quot;scheme&quot;:&quot;https&quot;}&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#x27;trainingcrm.sika.io&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#x27;curl/7.74.0&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_FOR</td>
          <td class="code"><pre>&#x27;10.135.185.167&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_HOST</td>
          <td class="code"><pre>&#x27;trainingcrm.sika.io&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_PORT</td>
          <td class="code"><pre>&#x27;443&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_PROTO</td>
          <td class="code"><pre>&#x27;https&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_SCHEME</td>
          <td class="code"><pre>&#x27;https&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_ORIGINAL_FORWARDED_FOR</td>
          <td class="code"><pre>&#x27;91.121.89.212&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_REAL_IP</td>
          <td class="code"><pre>&#x27;10.135.185.167&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_REQUEST_ID</td>
          <td class="code"><pre>&#x27;5d9a99431818973e71041b4328731649&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_SCHEME</td>
          <td class="code"><pre>&#x27;https&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>&#x27;/views/sessions_yaml/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#x27;10.244.1.241&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#x27;GET&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_URI</td>
          <td class="code"><pre>&#x27;/views/sessions_yaml/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#x27;tcrm-sika-prod-56c54c4b96-wdrgj&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#x27;80&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#x27;HTTP/1.1&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>uwsgi.core</td>
          <td class="code"><pre>1</pre></td>
        </tr>
      
        <tr>
          <td>uwsgi.node</td>
          <td class="code"><pre>b&#x27;tcrm-sika-prod-56c54c4b96-wdrgj&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>uwsgi.version</td>
          <td class="code"><pre>b&#x27;2.0.20&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;_io.TextIOWrapper name=2 mode=&#x27;w&#x27; encoding=&#x27;UTF-8&#x27;&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&lt;built-in function uwsgi_sendfile&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;uwsgi._Input object at 0x7f91a3b478b0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#x27;https&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#x27;trainingcrm.sika.io&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[&#x27;django.contrib.auth.backends.ModelBackend&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>&#x27;auth.User&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#x27;/app&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.locmem.LocMemCache&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CORS_ORIGIN_ALLOW_ALL</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;csrftoken&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>&#x27;django.views.csrf.csrf_failure&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>&#x27;HTTP_X_CSRFTOKEN&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_USE_SESSIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#x27;default&#x27;: {&#x27;ATOMIC_REQUESTS&#x27;: False,
             &#x27;AUTOCOMMIT&#x27;: True,
             &#x27;CONN_MAX_AGE&#x27;: 0,
             &#x27;ENGINE&#x27;: &#x27;django.db.backends.postgresql_psycopg2&#x27;,
             &#x27;HOST&#x27;: &#x27;db0.oxs.cz&#x27;,
             &#x27;NAME&#x27;: &#x27;trainingcrm_sika_io&#x27;,
             &#x27;OPTIONS&#x27;: {},
             &#x27;PASSWORD&#x27;: &#x27;********************&#x27;,
             &#x27;PORT&#x27;: 5432,
             &#x27;TEST&#x27;: {&#x27;CHARSET&#x27;: None,
                      &#x27;COLLATION&#x27;: None,
                      &#x27;MIGRATE&#x27;: True,
                      &#x27;MIRROR&#x27;: None,
                      &#x27;NAME&#x27;: None},
             &#x27;TIME_ZONE&#x27;: None,
             &#x27;USER&#x27;: &#x27;trainingcrm_sika_io&#x27;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y, P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d %H:%M:%S&#x27;,
 &#x27;%Y-%m-%d %H:%M:%S.%f&#x27;,
 &#x27;%Y-%m-%d %H:%M&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S&#x27;,
 &#x27;%m/%d/%Y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%Y %H:%M&#x27;,
 &#x27;%m/%d/%y %H:%M:%S&#x27;,
 &#x27;%m/%d/%y %H:%M:%S.%f&#x27;,
 &#x27;%m/%d/%y %H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>&#x27;N j, Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%Y-%m-%d&#x27;,
 &#x27;%m/%d/%Y&#x27;,
 &#x27;%m/%d/%y&#x27;,
 &#x27;%b %d %Y&#x27;,
 &#x27;%b %d, %Y&#x27;,
 &#x27;%d %b %Y&#x27;,
 &#x27;%d %b, %Y&#x27;,
 &#x27;%B %d %Y&#x27;,
 &#x27;%B %d, %Y&#x27;,
 &#x27;%d %B %Y&#x27;,
 &#x27;%d %B, %Y&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_TOOLBAR_CONFIG</td>
          <td class="code"><pre>{&#x27;SHOW_TOOLBAR_CALLBACK&#x27;: &lt;function show_toolbar at 0x7f91aa99ff40&gt;}</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>&#x27;.&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_AUTO_FIELD</td>
          <td class="code"><pre>&#x27;django.db.models.AutoField&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>&#x27;utf-8&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER</td>
          <td class="code"><pre>&#x27;django.views.debug.ExceptionReporter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>&#x27;django.views.debug.SafeExceptionReporterFilter&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>&#x27;django.core.files.storage.FileSystemStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>&#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="611604030c0012150413210d0e02000d090e1215">[email&#160;protected]</a>&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_HASHING_ALGORITHM</td>
          <td class="code"><pre>&#x27;sha256&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_FROM</td>
          <td class="code"><pre>&#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="89fdfbe8e0e7e0e7eeeafbe4c9fae0e2e8a7e0e6">[email&#160;protected]</a>&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>&#x27;email-smtp.eu-central-1.amazonaws.com&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>&#x27;AKIAYCSOG4KIUGR6CR4Q&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>&#x27;587&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>&#x27;[Django] &#x27;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_LOCALTIME</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>EXTERNAL_URL</td>
          <td class="code"><pre>&#x27;trainingcrm.sika.io&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[&#x27;django.core.files.uploadhandler.MemoryFileUploadHandler&#x27;,
 &#x27;django.core.files.uploadhandler.TemporaryFileUploadHandler&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>420</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORM_RENDERER</td>
          <td class="code"><pre>&#x27;django.forms.renderers.DjangoTemplates&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>[&#x27;django.contrib.admin&#x27;,
 &#x27;django.contrib.auth&#x27;,
 &#x27;django.contrib.contenttypes&#x27;,
 &#x27;django.contrib.sessions&#x27;,
 &#x27;django.contrib.messages&#x27;,
 &#x27;django.contrib.staticfiles&#x27;,
 &#x27;corsheaders&#x27;,
 &#x27;django_prometheus&#x27;,
 &#x27;debug_toolbar&#x27;,
 &#x27;email_queue&#x27;,
 &#x27;trainingcrm&#x27;,
 &#x27;trainingcrm2&#x27;,
 &#x27;subscribe&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(&#x27;af&#x27;, &#x27;Afrikaans&#x27;),
 (&#x27;ar&#x27;, &#x27;Arabic&#x27;),
 (&#x27;ar-dz&#x27;, &#x27;Algerian Arabic&#x27;),
 (&#x27;ast&#x27;, &#x27;Asturian&#x27;),
 (&#x27;az&#x27;, &#x27;Azerbaijani&#x27;),
 (&#x27;bg&#x27;, &#x27;Bulgarian&#x27;),
 (&#x27;be&#x27;, &#x27;Belarusian&#x27;),
 (&#x27;bn&#x27;, &#x27;Bengali&#x27;),
 (&#x27;br&#x27;, &#x27;Breton&#x27;),
 (&#x27;bs&#x27;, &#x27;Bosnian&#x27;),
 (&#x27;ca&#x27;, &#x27;Catalan&#x27;),
 (&#x27;cs&#x27;, &#x27;Czech&#x27;),
 (&#x27;cy&#x27;, &#x27;Welsh&#x27;),
 (&#x27;da&#x27;, &#x27;Danish&#x27;),
 (&#x27;de&#x27;, &#x27;German&#x27;),
 (&#x27;dsb&#x27;, &#x27;Lower Sorbian&#x27;),
 (&#x27;el&#x27;, &#x27;Greek&#x27;),
 (&#x27;en&#x27;, &#x27;English&#x27;),
 (&#x27;en-au&#x27;, &#x27;Australian English&#x27;),
 (&#x27;en-gb&#x27;, &#x27;British English&#x27;),
 (&#x27;eo&#x27;, &#x27;Esperanto&#x27;),
 (&#x27;es&#x27;, &#x27;Spanish&#x27;),
 (&#x27;es-ar&#x27;, &#x27;Argentinian Spanish&#x27;),
 (&#x27;es-co&#x27;, &#x27;Colombian Spanish&#x27;),
 (&#x27;es-mx&#x27;, &#x27;Mexican Spanish&#x27;),
 (&#x27;es-ni&#x27;, &#x27;Nicaraguan Spanish&#x27;),
 (&#x27;es-ve&#x27;, &#x27;Venezuelan Spanish&#x27;),
 (&#x27;et&#x27;, &#x27;Estonian&#x27;),
 (&#x27;eu&#x27;, &#x27;Basque&#x27;),
 (&#x27;fa&#x27;, &#x27;Persian&#x27;),
 (&#x27;fi&#x27;, &#x27;Finnish&#x27;),
 (&#x27;fr&#x27;, &#x27;French&#x27;),
 (&#x27;fy&#x27;, &#x27;Frisian&#x27;),
 (&#x27;ga&#x27;, &#x27;Irish&#x27;),
 (&#x27;gd&#x27;, &#x27;Scottish Gaelic&#x27;),
 (&#x27;gl&#x27;, &#x27;Galician&#x27;),
 (&#x27;he&#x27;, &#x27;Hebrew&#x27;),
 (&#x27;hi&#x27;, &#x27;Hindi&#x27;),
 (&#x27;hr&#x27;, &#x27;Croatian&#x27;),
 (&#x27;hsb&#x27;, &#x27;Upper Sorbian&#x27;),
 (&#x27;hu&#x27;, &#x27;Hungarian&#x27;),
 (&#x27;hy&#x27;, &#x27;Armenian&#x27;),
 (&#x27;ia&#x27;, &#x27;Interlingua&#x27;),
 (&#x27;id&#x27;, &#x27;Indonesian&#x27;),
 (&#x27;ig&#x27;, &#x27;Igbo&#x27;),
 (&#x27;io&#x27;, &#x27;Ido&#x27;),
 (&#x27;is&#x27;, &#x27;Icelandic&#x27;),
 (&#x27;it&#x27;, &#x27;Italian&#x27;),
 (&#x27;ja&#x27;, &#x27;Japanese&#x27;),
 (&#x27;ka&#x27;, &#x27;Georgian&#x27;),
 (&#x27;kab&#x27;, &#x27;Kabyle&#x27;),
 (&#x27;kk&#x27;, &#x27;Kazakh&#x27;),
 (&#x27;km&#x27;, &#x27;Khmer&#x27;),
 (&#x27;kn&#x27;, &#x27;Kannada&#x27;),
 (&#x27;ko&#x27;, &#x27;Korean&#x27;),
 (&#x27;ky&#x27;, &#x27;Kyrgyz&#x27;),
 (&#x27;lb&#x27;, &#x27;Luxembourgish&#x27;),
 (&#x27;lt&#x27;, &#x27;Lithuanian&#x27;),
 (&#x27;lv&#x27;, &#x27;Latvian&#x27;),
 (&#x27;mk&#x27;, &#x27;Macedonian&#x27;),
 (&#x27;ml&#x27;, &#x27;Malayalam&#x27;),
 (&#x27;mn&#x27;, &#x27;Mongolian&#x27;),
 (&#x27;mr&#x27;, &#x27;Marathi&#x27;),
 (&#x27;my&#x27;, &#x27;Burmese&#x27;),
 (&#x27;nb&#x27;, &#x27;Norwegian BokmÃ¥l&#x27;),
 (&#x27;ne&#x27;, &#x27;Nepali&#x27;),
 (&#x27;nl&#x27;, &#x27;Dutch&#x27;),
 (&#x27;nn&#x27;, &#x27;Norwegian Nynorsk&#x27;),
 (&#x27;os&#x27;, &#x27;Ossetic&#x27;),
 (&#x27;pa&#x27;, &#x27;Punjabi&#x27;),
 (&#x27;pl&#x27;, &#x27;Polish&#x27;),
 (&#x27;pt&#x27;, &#x27;Portuguese&#x27;),
 (&#x27;pt-br&#x27;, &#x27;Brazilian Portuguese&#x27;),
 (&#x27;ro&#x27;, &#x27;Romanian&#x27;),
 (&#x27;ru&#x27;, &#x27;Russian&#x27;),
 (&#x27;sk&#x27;, &#x27;Slovak&#x27;),
 (&#x27;sl&#x27;, &#x27;Slovenian&#x27;),
 (&#x27;sq&#x27;, &#x27;Albanian&#x27;),
 (&#x27;sr&#x27;, &#x27;Serbian&#x27;),
 (&#x27;sr-latn&#x27;, &#x27;Serbian Latin&#x27;),
 (&#x27;sv&#x27;, &#x27;Swedish&#x27;),
 (&#x27;sw&#x27;, &#x27;Swahili&#x27;),
 (&#x27;ta&#x27;, &#x27;Tamil&#x27;),
 (&#x27;te&#x27;, &#x27;Telugu&#x27;),
 (&#x27;tg&#x27;, &#x27;Tajik&#x27;),
 (&#x27;th&#x27;, &#x27;Thai&#x27;),
 (&#x27;tk&#x27;, &#x27;Turkmen&#x27;),
 (&#x27;tr&#x27;, &#x27;Turkish&#x27;),
 (&#x27;tt&#x27;, &#x27;Tatar&#x27;),
 (&#x27;udm&#x27;, &#x27;Udmurt&#x27;),
 (&#x27;uk&#x27;, &#x27;Ukrainian&#x27;),
 (&#x27;ur&#x27;, &#x27;Urdu&#x27;),
 (&#x27;uz&#x27;, &#x27;Uzbek&#x27;),
 (&#x27;vi&#x27;, &#x27;Vietnamese&#x27;),
 (&#x27;zh-hans&#x27;, &#x27;Simplified Chinese&#x27;),
 (&#x27;zh-hant&#x27;, &#x27;Traditional Chinese&#x27;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[&#x27;he&#x27;, &#x27;ar&#x27;, &#x27;ar-dz&#x27;, &#x27;fa&#x27;, &#x27;ur&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#x27;en-us&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;django_language&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SAMESITE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>&#x27;logging.config.dictConfig&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>&#x27;/accounts/profile/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>&#x27;/accounts/login/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>&#x27;&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.messages.storage.fallback.FallbackStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>[&#x27;corsheaders.middleware.CorsMiddleware&#x27;,
 &#x27;django.middleware.security.SecurityMiddleware&#x27;,
 &#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;,
 &#x27;django.middleware.common.CommonMiddleware&#x27;,
 &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,
 &#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;,
 &#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;,
 &#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;,
 &#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>&#x27;F j&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>NOTIFY_EMAIL_LIST</td>
          <td class="code"><pre>[&#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="97f8f9f3e5f2fdd7e4fefcf6b9fef8">[email&#160;protected]</a>&#x27;,
 &#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="402f2e2432252a33292b21002f2e2432252a33292b216e232f2d">[email&#160;protected]</a>&#x27;,
 &#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7a1b081912130c1f570e081b131413141d1908175714150e131c13191b0e131514093a0913111b171b131654191517">[email&#160;protected]</a>&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>ORIGIN</td>
          <td class="code"><pre>&#x27;https://trainingcrm.sika.io&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PIPEDRIVE_TOKEN</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>PROMETHEUS_LATENCY_BUCKETS</td>
          <td class="code"><pre>(0.1,
 0.2,
 0.5,
 0.6,
 0.8,
 1.0,
 2.0,
 3.0,
 4.0,
 5.0,
 6.0,
 7.5,
 9.0,
 12.0,
 15.0,
 20.0,
 30.0,
 inf)</pre></td>
        </tr>
      
        <tr>
          <td>RECAPTCHA_SECRET_KEY</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#x27;urls&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>&#x27;********************&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_PRELOAD</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REFERRER_POLICY</td>
          <td class="code"><pre>&#x27;same-origin&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>&#x27;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1664797962567a7975777a7e796562">[email&#160;protected]</a>&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>&#x27;default&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>&#x27;sessionid&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>&#x27;/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SAMESITE</td>
          <td class="code"><pre>&#x27;Lax&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.backends.db&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>&#x27;django.contrib.sessions.serializers.JSONSerializer&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#x27;settings&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>&#x27;m/d/Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>&#x27;django.core.signing.TimestampSigner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[&#x27;django.contrib.staticfiles.finders.FileSystemFinder&#x27;,
 &#x27;django.contrib.staticfiles.finders.AppDirectoriesFinder&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>&#x27;django.contrib.staticfiles.storage.StaticFilesStorage&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#x27;/app/static&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#x27;/static/&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#x27;APP_DIRS&#x27;: True,
  &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,
  &#x27;DIRS&#x27;: [],
  &#x27;OPTIONS&#x27;: {&#x27;context_processors&#x27;: [&#x27;django.template.context_processors.debug&#x27;,
                                     &#x27;django.template.context_processors.request&#x27;,
                                     &#x27;django.contrib.auth.context_processors.auth&#x27;,
                                     &#x27;django.contrib.messages.context_processors.messages&#x27;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>&#x27;django.test.runner.DiscoverRunner&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>&#x27;,&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>&#x27;P&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#x27;%H:%M:%S&#x27;, &#x27;%H:%M:%S.%f&#x27;, &#x27;%H:%M&#x27;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#x27;UTC&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#x27;wsgi.application&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>&#x27;DENY&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>&#x27;F Y&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>_EMAIL_HOST</td>
          <td class="code"><pre>&#x27;email-smtp.eu-central-1.amazonaws.com&#x27;</pre></td>
        </tr>
      
        <tr>
          <td>_SENTRY_DSN</td>
          <td class="code"><pre>&#x27;https://<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b98f898e818e8bdd8e88dd8c8e8d8e8ddd81d889da81dadc888ddadd8c8f8c8d8bf9cadcd7cdcbc097cad0d2d8d1c897dad6d4">[email&#160;protected]</a>/1&#x27;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      Youâ€™re seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></body>
</html>
